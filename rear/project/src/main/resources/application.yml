# 应用服务 WEB 访问端口
server:
  port: 8086

# 定义公钥和私钥
privateKey: "MIICdgIBADANBgkqhkiG9w0BAQEFAASCAmAwggJcAgEAAoGBALNnlItZoeYGYZDYLsews8nLCEc9MlZpJUN1d3b7ALk3PEGSSjxq1yE2EwHYkpBwycfLbmeaV4Ir2c0E0mYtMEcT6zj2SVBIvSPxis4K34AXpMo/h6PzwdMJVmyLvnkwzYNRCALknmBSmxIze4pGCpPLtHr3pGviX1VkrgAOq+mBAgMBAAECgYAw2ZJsA0L/NFuaqhLK0wWRe9RMOZCcUNMRtEmMPzpqNG0W2bOXEex0IZo5VXRLGjsHSRBN64vKaRBML/TuV32eVpG/oGz6QgX6w/b2kHumOEsGHIekOt9iruS0AsnqEHc2kYF4wnNmaTN6oxAYYCBd1P5Twz5Z1my5lvRF+irNFQJBAP55g2dadsCb6zqod4bxBMPa0qq8Mz/d8BsImHKE15Nc3RO9KvxdMnJmL857jrnKk9QZIbY6TPE08OzQohl35vcCQQC0et+TFajXnb7nx0KKJ5FZTv1PxDajVzflk4WFEDBDhFEhTZ9mgmH05Q1z5Qj1PGZRqs1yrR1H+mCDbep0Lj1HAkEA9iZSDgo6bksjuWS14aiHhG/JcW+EX1Xt6ChjVfrbj+a2zl4gE2aO4oun2KI5x8uFPRdmPZ+dR4B/P4L8GYiatwJASa38Bi0Kf/PrUu47EPG0WfRwX5coAykBLd063ibMvVOQV3s7/vptiS/VfSHctVlSIDcNpqpb0N27dwxxcbrK0wJAFDI2BO5WOgcuT58xgK/CoCdfZz9PM5CK0cy92sDV3+A8Qq2fu3Km8bXUxmL2Xlgdx4yGusmDwCJILizqsor/dg=="
publicKey: "MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCzZ5SLWaHmBmGQ2C7HsLPJywhHPTJWaSVDdXd2+wC5NzxBkko8atchNhMB2JKQcMnHy25nmleCK9nNBNJmLTBHE+s49klQSL0j8YrOCt+AF6TKP4ej88HTCVZsi755MM2DUQgC5J5gUpsSM3uKRgqTy7R696Rr4l9VZK4ADqvpgQIDAQAB"

# 应用名称
spring:
  application:
    name: spaceobj-project
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    name: defaultDataSource
    url: jdbc:mysql://localhost:3306/spaceobj-project?autoReconnect=true&useUnicode=true&characterEncoding=utf8&useSSL=false&serverTimezone=UTC
    username: root
    password: 123456
  redis:
    host: 127.0.0.1
    port: 6380
    password:
    database: 1
    timeout: 20s
    lettuce:
      pool:
        # 连接池中的最大空闲连接
        max-idle: 10
        # 最大连接数
        max-active: 200
        # 连接池最大阻塞等待时间（使用负值表示没有限制）
        max-wait: -1ms
        # 连接池中的最小空闲连接
        min-idle: 0
  kafka:
    bootstrap-servers: 127.0.0.1:9092  #bootstrap-servers：连接kafka的地址，多个地址用逗号分隔
    consumer:
      group-id: sysUser
      enable-auto-commit: true
      auto-commit-interval: 100ms
      properties:
        session.timeout.ms: 15000
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      auto-offset-reset: earliest
    producer:
      retries: 0 #若设置大于0的值，客户端会将发送失败的记录重新发送
      batch-size: 16384 #当将多个记录被发送到同一个分区时， Producer 将尝试将记录组合到更少的请求中。这有助于提升客户端和服务器端的性能。这个配置控制一个批次的默认大小（以字节为单位）。16384是缺省的配置
      buffer-memory: 33554432 #Producer 用来缓冲等待被发送到服务器的记录的总字节数，33554432是缺省配置
      key-serializer: org.apache.kafka.common.serialization.StringSerializer #关键字的序列化类
      value-serializer: org.apache.kafka.common.serialization.StringSerializer #值的序列化类

  cloud:
    # Nacos帮助文档: https://nacos.io/zh-cn/docs/concepts.html
    # Nacos认证信息
    nacos:
      discovery:
        username: nacos
        password: nacos
        # Nacos 服务发现与注册配置，其中子属性 server-addr 指定 Nacos 服务器主机和端口
        server-addr: localhost:8848
        # 注册到 nacos 的指定 namespace，默认为 public
        namespace: public
  servlet:
    multipart:
      max-file-size: 200KB
      max-request-size: 200KB


# Sa-Token配置
sa-token:
  # token 名称 (同时也是cookie名称)
  token-name: satoken
  # token 有效期，单位s 默认30天, -1代表永不过期
  timeout: 2592000
  # token 临时有效期 (指定时间内无操作就视为token过期) 单位: 秒
  activity-timeout: -1
  # 是否允许同一账号并发登录 (为true时允许一起登录, 为false时新登录挤掉旧登录)
  is-concurrent: true
  # 在多人登录同一账号时，是否共用一个token (为true时所有登录共用一个token, 为false时每次登录新建一个token)
  is-share: false
  # token风格
  token-style: uuid
  # 是否输出操作日志
  is-log: false
  # 配置 Sa-Token 单独使用的 Redis 连接
  alone-redis:
    database: 0
    host: 127.0.0.1
    port: 6380
    password:
    timeout: 20s








